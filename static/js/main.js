(function() {
  "use strict";

  const form = document.getElementById("verify");
  const noVulnerabilities = document.getElementById("no-vulnerabilities");

  /**
   * Initialize and return a new XMLHTTPRequest
   * @param {String} method - The HTTP method such as GET or POST
   * @param {String} url - The URL to which the request will be made
   * @returns And XMLHTTPRequest Object with a `responseType` of json
   */
  function initAjaxRequest(method, url) {
    let xmlHttpRequest = new XMLHttpRequest();
    xmlHttpRequest.open(method, url);
    xmlHttpRequest.resposeType = "json";
    return xmlHttpRequest;
  }

  /**
   * Wraps the `ajaxRequest` in a `Promise` and returns the `Promise`
   * @param {Object} ajaxRequest - The XMLHttpRequest object
   * @returns The `ajaxRequest` as a `Promise`
   */
  function getAjaxResponse(ajaxRequest) {
    return new Promise((resolve, reject) => {
      ajaxRequest.onreadystatechange = () => {
        if (ajaxRequest.readyState === 4) {
          if (ajaxRequest.status === 200 && ajaxRequest.responseText !== "") {
            resolve(ajaxRequest.responseText);
          } else {
            reject(
              `Ajax error: ${ajaxRequest.status} : ${ajaxRequest.responseText}`
            );
          }
        }
      };
    });
  }

  function buildTable(data, type) {
    const table = document.createElement("table");
    const tableHead = document.createElement("thead");
    const tableRow = document.createElement("tr");
    const tableBody = document.createElement("tbody");

    data.headings.forEach(heading => {
      let cell = document.createElement("td");
      cell.innerText = heading.text;
      tableRow.appendChild(cell);
    });

    tableHead.appendChild(tableRow);

    data.items.forEach(item => {
      let row = document.createElement("tr");
      let nameCell = document.createElement("td");

      if (type === "vulnerable-libs") {
        let vulnCountCell = document.createElement("td");
        let highestSeverityCell = document.createElement("td");
        nameCell.innerText = item.detectedLib.text;
        vulnCountCell.innerText = item.vulnCount;
        highestSeverityCell.innerText = item.highestSeverity;

        row.appendChild(nameCell);
        row.appendChild(vulnCountCell);
        row.appendChild(highestSeverityCell);

        tableBody.appendChild(row);

        if (item.detectedLib.url) {
          let reportRow = document.createElement("tr");
          let reportCell = document.createElement("td");
          let reportLink = document.createElement("a");

          reportLink.href = item.detectedLib.url;
          reportLink.innerText = "Read the security advisory";
          reportCell.setAttribute("colspan", 2);

          reportCell.appendChild(reportLink);
          reportRow.appendChild(reportCell);

          tableBody.appendChild(reportRow);
        }
      } else {
        let versionCell = document.createElement("td");

        nameCell.innerText = item.name;
        versionCell.innerText =
          item.version || "no version information available";

        row.appendChild(nameCell);
        row.appendChild(versionCell);

        tableBody.appendChild(row);
      }
    });

    table.appendChild(tableHead);
    table.appendChild(tableBody);
    return table;
  }

  function appendResults(data) {
    const librariesContainer = document.getElementById("libraries");
    const vulnerableLibrariesContainer = document.getElementById(
      "vulnerable-libs"
    );
    const parsedJSON = JSON.parse(data);

    librariesContainer.innerHTML = "";
    librariesContainer.appendChild(
      buildTable(parsedJSON.audits["js-libraries"].details)
    );

    vulnerableLibrariesContainer.innerHTML = "";
    if (parsedJSON.audits["no-vulnerable-libraries"].score === 0) {
      vulnerableLibrariesContainer.appendChild(
        buildTable(
          parsedJSON.audits["no-vulnerable-libraries"].details,
          "vulnerable-libs"
        )
      );
    } else {
      noVulnerabilities.classList.remove("hidden");
    }
    console.dir(parsedJSON.audits);
  }

  form.addEventListener("submit", function(event) {
    event.preventDefault();

    const waitScreen = document.getElementById("wait-screen");
    const vulnerabilityReport = document.getElementById("vulnerability-report");

    vulnerabilityReport.classList.add("hidden");
    waitScreen.classList.remove("hidden");

    let formData = new URLSearchParams(new FormData(form)).toString();
    let ajaxRequest = initAjaxRequest("post", "/test");

    ajaxRequest.setRequestHeader(
      "Content-Type",
      "application/x-www-form-urlencoded"
    );
    ajaxRequest.send(formData);

    getAjaxResponse(ajaxRequest).then(data => {
      noVulnerabilities.classList.add("hidden");
      appendResults(data);

      waitScreen.classList.add("hidden");
      vulnerabilityReport.classList.remove("hidden");
    });
  });
})();
